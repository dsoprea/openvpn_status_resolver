#!/usr/bin/env python3

import sys
import os
import argparse
import json

import openvpn_status

_DESCRIPTION = \
    "Parse OpenVPN status data in order to resolve client names to IPs in " \
    "the input data."

_STATUS_FILEPATH = os.environ.get('OSR_STATUS_FILEPATH')


def _get_args():
    parser = \
        argparse.ArgumentParser(
            description=_DESCRIPTION)

    parser.add_argument(
        '--status-filepath',
        help="Status file-path")

    parser.add_argument(
        '--json',
        action='store_true',
        help="Format at JSON")

    args = parser.parse_args()
    return args

def _get_pretty_json(data):
    return \
        json.dumps(
            data,
            sort_keys=True,
            indent=4,
            separators=(',', ': '))

def _main():
    args = _get_args()


    # Read status info

    status_filepath = _STATUS_FILEPATH or args.status_filepath

    assert \
        status_filepath is not None, \
        "Status file-path must be provided via OSR_STATUS_FILEPATH or " \
            "--status-filepath."

    with open(status_filepath) as f:
        raw_status = f.read()
        parsed_status = openvpn_status.parse_status(raw_status)


    # `client_list` is used when starting from an external IP and port
    #
    # {
    #   '142.197.134.100:47016': <openvpn_status.models.Client object at 0x732f60ec1160>
    # }
    #
    # - common_name: client name (per the client certificate)
    # - bytes_received
    # - bytes_sent
    # - connected_since
    #
    # `global_stats`
    #
    # - max_bcast_mcast_queue_len
    #
    #
    # `routing_table` is used when starting from an internal IP
    #
    # {
    #   '10.8.0.2': <openvpn_status.models.Routing object at 0x732f60ec12b0>
    # }
    #
    # - common_name: client name (per the client certificate)
    # - real_address: IP and port of real-world IP
    # - last_ref: Timestamp
    #

    # Print as BASH exports

    index = {}
    for internal_ip, route in parsed_status.routing_table.items():
        name = route.common_name
        name_uc = name.upper()

        if args.json is True:
            index[name] = internal_ip
        else:
            variable_name = 'OPENVPN_CLIENT_{}_INTERNAL_IP'.format(name_uc)
            print("export {}=\"{}\"".format(variable_name, internal_ip))


    if args.json is False:
        sys.exit(0)


    print(_get_pretty_json(index))


_main()

